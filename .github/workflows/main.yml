name: lint-pytest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest isort black
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run black
      # run: black -l 79 --check .
      run: black --check .
    - name: Run isort
      run: isort --profile black --check .
    - name: Lint with flake8
      # black compatible configuration
      run: flake8 --max-line-length=88 --extend-ignore=E203 .
        # # stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: pytest


#
#
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     # - name: Cache pip
#     #   uses: actions/cache@v1
#     #   with:
#     #    path: ~/.cache/pip # This path is specific to Ubuntu
#     #    # Look to see if there is a cache hit for the corresponding requirements file
#     #    key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
#     #    restore-keys: |
#     #      ${{ runner.os }}-pip-
#     #      ${{ runner.os }}-
#     # You can test your matrix by printing the current Python version
#     - name: Display Python version
#       run: python -c "import sys; print(sys.version)"
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install flake8 pytest pytest-cov
#         # pip install pycocotools
#         # pip install shapely
#         # pip install Cython
#     # pip install -r requirements.txt
#     # - name: Run black
#     #   run:
#     #     black --check .
#     - name: Run flake8
#       run: flake8 --statistics
#     - name: Run pytest
#       # run: pytest -v --cov=calculator
#       run: pytest -v --cov
#     # - name: Run pylint
#     #   run: pylint iglovikov_helper_functions
#     # - name: Run Mypy
#     #   run: mypy iglovikov_helper_functions
#     # - name: Run isort
#     #   run: isort --profile black iglovikov_helper_functions
#     # - name: tests
#     #   run: |
#     #    pip install .[tests]
#     #    pytest
#
